{"version":3,"file":"static/js/984.0df3b276.chunk.js","mappings":"sLAyCA,UAjCgB,SAAHA,GAAsB,IAADC,EAAAD,EAAfE,KAAAA,OAAI,IAAAD,EAAG,EAACA,EAEzBE,GAA0BC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GActB,OACEI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,QAAQ,KACTJ,EAAAA,EAAAA,MAAA,OAAKK,UAAWC,EAAAA,EAAAA,UAAiBJ,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAIE,UAAWC,EAAAA,EAAAA,MAAaJ,SAAC,aAC7BC,EAAAA,EAAAA,KAAA,QAAME,UAAWC,EAAAA,EAAAA,MAAaJ,SAAEJ,KAChCE,EAAAA,EAAAA,MAAA,UAAQK,UAAWC,EAAAA,EAAAA,IAAYC,KAAK,SAASC,QAjB3B,SAACC,GACvBC,QAAQC,IAAI,gCAAiCF,GAC7CV,GAAS,SAAAa,GAAS,OAAIA,EAAYnB,CAAI,GACxC,EAc4ES,SAAA,CAAC,gBACvDT,MAEhBO,EAAAA,EAAAA,MAAA,UAAQK,UAAWC,EAAAA,EAAAA,IAAYC,KAAK,SAASC,QAd3B,SAACC,GACvBC,QAAQC,IAAI,gCAAiCF,GAC7CV,GAAS,SAAAa,GAAS,OAAIA,EAAYnB,CAAI,GACxC,EAW4ES,SAAA,CAAC,gBACvDT,UAKxB,C,kBCtCA,KAAgB,UAAY,kCAAkC,MAAQ,8BAA8B,MAAQ,8BAA8B,IAAM,4B","sources":["components/CounterWithHooks/CounterWithHooks.jsx","webpack://react-event-listener/./src/components/componentStyle.module.css?5a93"],"sourcesContent":["//----------Функціональні компоненти:\n// Современный подход: Функциональные компоненты с хуками (useState, useEffect, useReducer и т.д.) являются современным стандартом в React и предоставляют мощные возможности для управления состоянием и побочными эффектами без необходимости использования классов.\n//Рекомендуется использовать функциональные компоненты с хуками для новых разработок из-за их простоты, гибкости и современности. Однако, классовые компоненты могут все еще быть полезны для поддержки существующего кода или в ситуациях, где использование хуков затруднительно. Важно понимать и уметь работать с обоими типами компонентов, чтобы эффективно работать с любым кодом на React.\n\nimport React, { useState } from 'react';\nimport HomePage from \"components/HomePage/HomePage\";\nimport styles from '../componentStyle.module.css';\n\nconst Counter = ({ step = 1 }) => {\n  // Используем хук useState для состояния value\n  const [value, setValue] = useState(0);\n\n  // Функция для инкрементации\n  const handleIncrement = (evt) => {\n    console.log(\"Increment button was clicked!\", evt);\n    setValue(prevValue => prevValue + step);\n  };\n\n  // Функция для декрементации\n  const handleDecrement = (evt) => {\n    console.log(\"Decrement button was clicked!\", evt);\n    setValue(prevValue => prevValue - step);\n  };\n\n  return (\n    <>\n      <HomePage />\n      <div className={styles.container}>\n        <h2 className={styles.title}>Counter</h2>\n        <span className={styles.value}>{value}</span>\n        <button className={styles.btn} type=\"button\" onClick={handleIncrement}>\n          Increment by {step}\n        </button>\n        <button className={styles.btn} type=\"button\" onClick={handleDecrement}>\n          Decrement by {step}\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Counter;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"componentStyle_container__bAaxE\",\"title\":\"componentStyle_title__Zk+ua\",\"value\":\"componentStyle_value__pYsGe\",\"btn\":\"componentStyle_btn__wnmnE\"};"],"names":["_ref","_ref$step","step","_useState","useState","_useState2","_slicedToArray","value","setValue","_jsxs","_Fragment","children","_jsx","HomePage","className","styles","type","onClick","evt","console","log","prevValue"],"sourceRoot":""}