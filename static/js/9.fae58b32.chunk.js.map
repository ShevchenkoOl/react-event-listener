{"version":3,"file":"static/js/9.fae58b32.chunk.js","mappings":"kMACA,EAA4B,4BAA5B,EAAgE,wBAAhE,EAAkG,0BAAlG,EAAkI,sBAAlI,EAAoK,4B,SCqDpK,EAlDiB,WACf,OACEA,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAaC,SAAC,oBAC7BH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAeC,SAAA,EAC7BC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CACNC,GAAG,qBACHL,UAAW,SAAAM,GAAW,OAAAA,EAARC,SACJ,GAAAC,OAAMP,EAAU,KAAAO,OAAIP,GAAqBA,CAAU,EAC5DC,SACF,4CAGDC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CACNC,GAAG,kBACHL,UAAW,SAAAS,GAAW,OAAAA,EAARF,SACJ,GAAAC,OAAMP,EAAU,KAAAO,OAAIP,GAAqBA,CAAU,EAC5DC,SACF,+BAGDC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CACNC,GAAG,YACHL,UAAW,SAAAU,GAAW,OAAAA,EAARH,SACJ,GAAAC,OAAMP,EAAU,KAAAO,OAAIP,GAAqBA,CAAU,EAC5DC,SACF,cAGDC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CACNC,GAAG,YACHL,UAAW,SAAAW,GAAW,OAAAA,EAARJ,SACJ,GAAAC,OAAMP,EAAU,KAAAO,OAAIP,GAAqBA,CAAU,EAC5DC,SACF,cAGDC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CACNC,GAAG,sBACHL,UAAW,SAAAY,GAAW,OAAAA,EAARL,SACJ,GAAAC,OAAMP,EAAU,KAAAO,OAAIP,GAAqBA,CAAU,EAC5DC,SACF,uCAMT,C,gGCnDA,EAA4B,4BAA5B,EAA8D,sB,SCqE9D,EAhE2B,WAEzB,IAAAW,GAA0BC,EAAAA,EAAAA,UAAS,QAAOC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBG,GAAcC,EAAAA,EAAAA,QAAO,MAmC3B,OAlBAC,EAAAA,EAAAA,YAAU,WAWR,OAVIJ,EACFE,EAAYG,QAAUC,aAAY,WAChCT,EAjBE,IAANV,OAAWoB,KAAKC,MAAsB,SAAhBD,KAAKE,UACxBC,SAAS,IACTC,SAAS,EAAG,IAgBb,GAAG,KAC8B,OAAxBT,EAAYG,UACrBO,cAAcV,EAAYG,SAC1BH,EAAYG,QAAU,MAIjB,WACuB,OAAxBH,EAAYG,SACdO,cAAcV,EAAYG,QAE9B,CACF,GAAG,CAACL,KAGFtB,EAAAA,EAAAA,MAAAmC,EAAAA,SAAA,CAAAhC,SAAA,EACEC,EAAAA,EAAAA,KAACgC,EAAAA,QAAQ,KACTpC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAkBmC,MAAO,CAAEC,gBAAiBpB,GAAQf,SAAA,EAClEC,EAAAA,EAAAA,KAAA,UACEH,UAAWC,EACXqC,GAAG,WAEHC,QAnCmB,WACzBjB,GAAa,EACf,EAiCoCpB,SAC7B,WAGDC,EAAAA,EAAAA,KAAA,UACEH,UAAWC,EACXqC,GAAG,UAEHC,QAvCkB,WACxBjB,GAAa,GACbJ,EAAS,OACX,EAoCmChB,SAC5B,cAMT,C","sources":["webpack://react-event-listener/./src/components/HomePage/homePage.module.css?edda","components/HomePage/HomePage.jsx","webpack://react-event-listener/./src/components/SwitcherBackground/switcher.module.css?026b","components/SwitcherBackground/SwitcherBackground.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"homePage_container__AYzZD\",\"title\":\"homePage_title__m8Mdo\",\"section\":\"homePage_section__11nvh\",\"nav\":\"homePage_nav__+OpNF\",\"activeNav\":\"homePage_activeNav__71u68\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styles from './homePage.module.css';\n\nconst HomePage = () => {\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Event Listener</h1>\n      <div className={styles.section}>\n        <NavLink\n          to=\"/functionComponent\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Using the Functional Component (hooks)\n        </NavLink>\n        <NavLink\n          to=\"/classComponent\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Using the Class Component\n        </NavLink>\n        <NavLink\n          to=\"/Feedback\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Feedback\n        </NavLink>\n        <NavLink\n          to=\"/Contacts\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Contacts\n        </NavLink>\n        <NavLink\n          to=\"/SwitcherBackground\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Switcher Background and Input\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"switcher_container__qChCM\",\"btn\":\"switcher_btn__gCkRp\"};","import { useEffect, useRef, useState } from 'react';\nimport HomePage from 'components/HomePage/HomePage';\n\nimport styles from './switcher.module.css';\n// import { nanoid } from 'nanoid';\n\nconst SwitcherBackground = () => {\n//   const [isDisabled, setIsDisabled] = useState(true);\n  const [color, setColor] = useState('#fff');\n  const [isRunning, setIsRunning] = useState(true); //// Состояние для контроля работы таймера\n  const intervalRef = useRef(null); // Для хранения идентификатора таймера\n  \n  const getRandomHexColor = () => {\n    return `#${Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, 0)}`;\n  };\n\n  const startChangingColor = () => {\n    setIsRunning(true);\n  };\n\n  const stopChangingColor = () => {\n    setIsRunning(false);\n    setColor('#fff'); // Устанавливаем цвет фона в изначальное значение\n  };\n\n  useEffect(() => {\n    if (isRunning) {\n      intervalRef.current = setInterval(() => {\n        setColor(getRandomHexColor());\n      }, 1000);\n    } else if (intervalRef.current !== null) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    // Очистка интервала при размонтировании компонента\n    return () => {\n      if (intervalRef.current !== null) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning]); // Эффект выполнится каждый раз при изменении isRunning\n\n  return (\n    <>\n      <HomePage />\n      <div className={styles.container} style={{ backgroundColor: color }}>\n        <button\n          className={styles.btn}\n          id=\"btnStart\"\n        //   disabled={!isDisabled}\n          onClick={startChangingColor}\n        >\n          Start\n        </button>\n        <button\n          className={styles.btn}\n          id=\"btnStop\"\n        //   disabled={isDisabled}\n          onClick={stopChangingColor}\n        >\n          Stop\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default SwitcherBackground;\n\n// Перший, простий і найважливіший хук useState. З назви зрозуміло, що він пов'язаний з станом компонента. Саме завдяки йому у функціональних компонентів з'явився внутрішній стан.\n\n// const SwitcherBackground = () => {\n\n// // let numbers = [1, 25, 69, 115];\n// const [numbers, setNumbers] = useState([]);\n\n// const addNumbers = () => {\n//   const randomNumber = Math.round(Math.random()*10);\n//   // console.log(randomNumber);\n//   setNumbers([...numbers, randomNumber]);\n// };\n\n\n// const [value, setValue] = useState(0); // Хук useState повертає масив із двох елементів: перший - поточне значення стану, другий - функцію для його зміни, яку можна використовувати де завгодно, наприклад, в обробнику подій. React буде зберігати цей стан між рендерами. Використовуючи деструктуризацію, можна задати будь-які імена змінних.\n// const [input, setInput] = useState(\"\");\n\n// // Очистка поля ввода\n// // Добавление состояния displayText:\n// const [displayText, setDisplayText] = useState(\"\");\n// const [isActive, setIsActive] = useState(false); // перемыкач  кнопки \n\n// const text = isActive ? \"Click me\" : \"Clicked\";\n\n// useEffect(() => {\n//     console.log(`Setting document title to: You clicked ${value} times`);\n//     document.querySelector(\"p\").textContent = `You clicked ${value} times`;\n//   }); // Запускается только при изменении `value`\n  \n// // useEffect выполняет функцию, которую вы ему передали, после того как компонент рендерится (отрисовывается) на экране.\n// // В данном случае, функция внутри useEffect обновляет заголовок документа (document.title) с текстом, который включает текущее значение value.\n//   return (\n//     <>\n//     <HomePage />\n//     <div className={styles.container}>\n//       <ul>\n//         {numbers.map((num) => <li key={nanoid()}>{num}</li>)}\n//       </ul>\n//       <button className={styles.btn} onClick={addNumbers}>Add random number</button>\n//     <p>{value}</p>\n//       <button className={styles.btn} type=\"button\" onClick={() => setValue(value + 1)}>\n//         Increment value by 1\n//       </button>\n//       <form onSubmit={(e)=> {e.preventDefault(); setDisplayText(input); setInput(\"\")}}>\n//         <input type=\"text\" value={input} onChange={(e) => setInput(e.target.value)}/>  {/* Атрибут value в элементе <input> отвечает за текущее значение, которое отображается в поле ввода. */}\n//         <div>{displayText}</div>\n//       </form>\n//       <button className={styles.btn} onClick={() => setIsActive(prevState => !prevState)}>{text}</button> {/* или второй вариант  setIsActive(isActive => !isActive)*/ }\n//     {/* prevState означает \"предыдущее состояние\". Вы можете использовать любое имя для этого аргумента. */}\n//     </div>\n//     </>\n//   );\n// };\n\n// export default SwitcherBackground;\n\n\n// Когда использовать useEffect:\n\n// Работа с API: Получение данных с сервера при загрузке компонента.\n// import React, { useState, useEffect } from 'react';\n\n// const DataFetchingComponent = () => {\n//   const [data, setData] = useState(null);\n\n//   useEffect(() => {\n//     fetch('https://api.example.com/data')\n//       .then(response => response.json())\n//       .then(data => setData(data));\n//   }, []); // Пустой массив зависимостей означает, что эффект выполнится только один раз при монтировании компонента\n\n//   return (\n//     <div>\n//       {data ? <p>Data: {data}</p> : <p>Loading...</p>}\n//     </div>\n//   );\n// };\n\n// Подписки: Подписка на события (например, WebSocket, события DOM) и их последующая отписка.\n// import React, { useState, useEffect } from 'react';\n\n// const ResizeComponent = () => {\n//   const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n//   useEffect(() => {\n//     const handleResize = () => {\n//       setWindowWidth(window.innerWidth);\n//     };\n\n//     window.addEventListener('resize', handleResize);\n\n//     // Функция очистки события\n//     return () => {\n//       window.removeEventListener('resize', handleResize);\n//     };\n//   }, []); // Эффект выполнится только один раз при монтировании компонента\n\n//   return (\n//     <div>\n//       <p>Window width: {windowWidth}</p>\n//     </div>\n//   );\n// };\n\n// Изменение заголовка документа: Изменение заголовка страницы в зависимости от состояния компонента.\n// import React, { useState, useEffect } from 'react';\n\n// const TitleComponent = () => {\n//   const [count, setCount] = useState(0);\n\n//   useEffect(() => {\n//     document.title = `You clicked ${count} times`;\n//   }, [count]); // Эффект выполнится каждый раз при изменении count\n\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>Click me</button>\n//     </div>\n//   );\n// };\n\n// Таймеры: Установка и очистка таймеров (например, setInterval, setTimeout).\n// import React, { useState, useEffect } from 'react';\n\n// const TimerComponent = () => {\n//   const [count, setCount] = useState(0);\n\n//   useEffect(() => {\n//     const intervalId = setInterval(() => {\n//       setCount(prevCount => prevCount + 1);\n//     }, 1000);\n\n//     // Функция очистки интервала\n//     return () => clearInterval(intervalId);\n//   }, []); // Эффект выполнится только один раз при монтировании компонента\n\n//   return (\n//     <div>\n//       <p>Count: {count}</p>\n//     </div>\n//   );\n// };\n\n// Очистка ресурсов: Очистка ресурсов при размонтировании компонента, чтобы избежать утечек памяти.\n"],"names":["_jsxs","className","styles","children","_jsx","NavLink","to","_ref","isActive","concat","_ref2","_ref3","_ref4","_ref5","_useState","useState","_useState2","_slicedToArray","color","setColor","_useState3","_useState4","isRunning","setIsRunning","intervalRef","useRef","useEffect","current","setInterval","Math","floor","random","toString","padStart","clearInterval","_Fragment","HomePage","style","backgroundColor","id","onClick"],"sourceRoot":""}