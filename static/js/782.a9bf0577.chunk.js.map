{"version":3,"file":"static/js/782.a9bf0577.chunk.js","mappings":"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","sources":["webpack://react-event-listener/./src/components/Contacts/contacts.module.css?1e09","components/Contacts/ContactFind.jsx","components/Contacts/ContactsList.jsx","components/Contacts/ContactsForm.jsx","components/Contacts/ContactDetail.jsx","components/Contacts/Contacts.jsx","webpack://react-event-listener/./src/components/HomePage/homePage.module.css?edda","components/HomePage/HomePage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"contacts_container__7CHN4\",\"title\":\"contacts_title__ryyzt\",\"list\":\"contacts_list__QBWBd\",\"item\":\"contacts_item__82PmL\",\"buttonGroup\":\"contacts_buttonGroup__TgxO5\",\"red-border\":\"contacts_red-border__8C5A8\",\"btn\":\"contacts_btn__w2CK-\",\"btnDel\":\"contacts_btnDel__rnqwn\",\"modalOverlay\":\"contacts_modalOverlay__uYIaQ\",\"modalContainer\":\"contacts_modalContainer__8gSuQ\",\"closeIcon\":\"contacts_closeIcon__mTD+C\",\"text\":\"contacts_text__f65ag\"};","import React from \"react\";\n\nconst ContactFind = ({name, onFindContact}) => {\n  return (\n    <>\n      <label htmlFor=\"find\">Find contact by name</label>\n      <input\n        onChange={onFindContact}\n        type=\"text\"\n        name=\"find\"\n        value={name}\n      />\n    </>\n  );\n};\n\nexport default ContactFind;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./contacts.module.css\";\nimport ContactFind from \"./ContactFind\";\n\nconst ContactsList = ({\n  contactsList,\n  onDeleteContact,\n  onSelectContact,\n  name,\n  onFindContact,\n}) => {\n  return (\n    <div className={styles.container}>\n      <h2 className={styles.titleH2}>Contacts List:</h2>\n      <ContactFind name={name} onFindContact={onFindContact} />\n      {contactsList.length > 0 ? (\n      <ul className={styles.list}>\n        {contactsList.map((contact) => (\n          <li key={contact.id} className={styles.item}>\n            <span>\n              {contact.name}: {contact.number}\n            </span>\n            <div className={styles.buttonGroup}>\n              <button\n                className={styles.btnDel}\n                onClick={() => onDeleteContact(contact)}\n              >\n                Delete\n              </button>\n              <button\n                className={styles.btn}\n                onClick={() => onSelectContact(contact)}\n              >\n                Detail\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n       ) : (<h2 className={styles.title}>No contacts found</h2>)}\n    </div>\n  );\n};\n\nContactsList.propTypes = {\n  contactsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ContactsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './contacts.module.css';\n\nconst ContactsForm = ({ text, name, number, onSubmit, onNameChange, onNumberChange }) => {\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>{text}</h1>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          onChange={onNameChange}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n        //   required\n        />\n        <label htmlFor=\"number\">Number:</label>\n        <input\n          onChange={onNumberChange}\n          type=\"text\"\n          name=\"number\"\n          value={number}\n        //   required\n        />\n        <button className={styles.btn}>Add contact</button>\n      </form>\n    </div>\n  );\n};\n\nContactsForm.propTypes = {\n  text: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onNameChange: PropTypes.func.isRequired,\n  onNumberChange: PropTypes.func.isRequired,\n};\n\nexport default ContactsForm;\n","import React from \"react\";\nimport { FaRegWindowClose } from \"react-icons/fa\";\n\nimport styles from './contacts.module.css';\n\nconst ContactDetail = ({contact, onClose}) => {\n\nreturn (\n<div className={styles.modalOverlay}>\n      <div className={styles.modalContainer}>\n        <FaRegWindowClose className={styles.closeIcon} onClick={onClose} />\n        <h2 className={styles.title}>Contact Detail</h2>\n        <span className={styles.text}>{contact.name}: {contact.number}</span>\n      </div>\n    </div>\n)\n};\n\nexport default ContactDetail;","import React, { useState } from \"react\";\nimport HomePage from \"components/HomePage/HomePage\";\nimport { Notify } from \"notiflix\";\nimport { nanoid } from \"nanoid\";\nimport ContactsList from \"./ContactsList\";\nimport ContactsForm from \"./ContactsForm\";\nimport ContactDetail from \"./ContactDetail\";\n\nconst Contacts = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [contactsList, setContacts] = useState([]); //создаём пустой масив для списка контактов\n  const [selectedContact, setSelectedContact] = useState(null); // состояние для выбранного контакта\n  const [search, setSearch] = useState(''); // состояние для поиска контакта\n\n  // handleNameChange и handleNumberChange обновляют состояния name и number соответственно.\n  const handleChangeName = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleChangeNumber = (e) => {\n    setNumber(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const id = nanoid(); // добавляет id к новосоздоному контакту\n    const newContacts = { id, name, number };\n    if (name !== \"\" || number !== \"\") {\n      setContacts([...contactsList, newContacts]); //добавляем новый контакт в масив контактов\n      Notify.success(`${name} successful added to your phonebook!`);\n      console.log(newContacts);\n      setName(\"\");\n      setNumber(\"\");\n    } else {\n      Notify.failure(\"To add a contact you need to fill in all fields\");\n    }\n  };\n\n  const deleteContact = (contact) => {\n    setContacts(contactsList.filter((c) => c.id !== contact.id));\n    Notify.success(`${contact.name} successful deleted from your phonebook!`);\n  };\n  //   1. contactsList.filter(...): Эта часть кода создает новый массив, содержащий только те контакты, у которых id не совпадает с id удаляемого контакта.\n  //   2. (c) => c.id !== contact.id: Это стрелочная функция, которая проверяет каждый контакт c в contactsList. Если id текущего контакта c не совпадает с id контакта, который нужно удалить, то этот контакт включается в новый массив.\n  //   3. setContacts(...): Функция setContacts обновляет состояние contactsList, заменяя его на новый отфильтрованный массив. Это приводит к повторному рендерингу компонента, отображающего список контактов, с обновленным списком, из которого исключен удаленный контакт.\n\n  const findContact = (e) => {\n    const searchContact = e.target.value;\n    setSearch(searchContact);\n    console.log(searchContact);\n  };\n\n  const filteredContacts = contactsList.filter((contact) =>\n    contact.name.toLowerCase().includes(search.toLowerCase())\n  );\n\n  const selectContact = (contact) => {\n    setSelectedContact(contact);\n  };\n\n  const closeContact = () => {\n    setSelectedContact(null);\n  };\n\n  return (\n    <>\n      <HomePage />\n      <ContactsForm\n        text=\"Phone Book\"\n        name={name}\n        number={number}\n        onNameChange={handleChangeName}\n        onNumberChange={handleChangeNumber}\n        onSubmit={handleSubmit}\n      />\n      {contactsList.length > 0 && (\n        <ContactsList\n          name={search}\n          contactsList={filteredContacts}\n          onDeleteContact={deleteContact}\n          onSelectContact={selectContact}\n          onFindContact={findContact}\n        />\n      )}\n      {selectedContact && (\n        <ContactDetail contact={selectedContact} onClose={closeContact} />\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"homePage_container__AYzZD\",\"title\":\"homePage_title__m8Mdo\",\"section\":\"homePage_section__11nvh\",\"nav\":\"homePage_nav__+OpNF\",\"activeNav\":\"homePage_activeNav__71u68\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styles from './homePage.module.css';\n\nconst HomePage = () => {\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Event Listener</h1>\n      <div className={styles.section}>\n        <NavLink\n          to=\"/functionComponent\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Using the Functional Component (hooks)\n        </NavLink>\n        <NavLink\n          to=\"/classComponent\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Using the Class Component\n        </NavLink>\n        <NavLink\n          to=\"/Feedback\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Feedback\n        </NavLink>\n        <NavLink\n          to=\"/Contacts\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Contacts\n        </NavLink>\n        <NavLink\n          to=\"/SwitcherBackground\"\n          className={({ isActive }) =>\n            isActive ? `${styles.nav} ${styles.activeNav}` : styles.nav\n          }\n        >\n          Switcher Background and Input\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"names":["_ref","name","onFindContact","_jsxs","_Fragment","children","_jsx","htmlFor","onChange","type","value","contactsList","onDeleteContact","onSelectContact","className","styles","ContactFind","length","map","contact","number","onClick","id","text","onSubmit","onNameChange","onNumberChange","onClose","FaRegWindowClose","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","_useState5","_useState6","setContacts","_useState7","_useState8","selectedContact","setSelectedContact","_useState9","_useState10","search","setSearch","filteredContacts","filter","toLowerCase","includes","HomePage","ContactsForm","e","target","preventDefault","newContacts","nanoid","concat","_toConsumableArray","Notify","console","log","ContactsList","c","searchContact","ContactDetail","NavLink","to","isActive","_ref2","_ref3","_ref4","_ref5"],"sourceRoot":""}